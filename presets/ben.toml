[header]
version = "1.0"
required_extensions = [
    "dbankier.vscode-quick-select",
    "haberdashPI.vscode-select-by-indent",
    "haberdashPI.selection-utilities",
    "haberdashPI.move-cursor-by-argument",
    "pustelto.bracketeer",
    "wmaurer.change-case",
    "pranshuagrawal.toggle-case",
    "albymor.increment-selection",
    "pkief.markdown-checkbox",
    "edgardmessias.clipboard-manager",
    "stkb.rewrap",
    "haberdashPI.terminal-polyglot",
    "jack89ita.open-file-from-path",
    "koalamer.labeled-bookmarks",
]

[bind]
name = "Ben's Key Bindings"
description = """
Keybindings for Ben :)
"""

[bind.modes]
name = "Modes"
description = """
Larkin uses different modes (like vim). Insert is the default and it 
works the same way VSCode normally does. Upon hitting escape you enter normal
mode, wherein a variety of behaviors are available to move around and manipulate the
text.

Refer to the actions section for the various ways you can exit normal mode and
return to insert mode.

**TODO**: document the other modes
"""

[[bind.modes.items]]
name = "normal"
description = "Enter normal mode"
key = ["escape", "ctrl+["]
do = ["modalkeys.enterNormal", "modalkeys.reset"]

[[bind.modes.items]]
key = ["escape", "ctrl+["]
when = "suggestWidgetVisible && textInputFocus"
do = ["modalkeys.enterNormal", "modalkeys.reset"]

[[bind.modes.items]]
# by default typing keys in a mode other than insert is simply ignored
name = "ignore"
description = "this key does nothing"
key = ["<all-keys>", "shift+<all-keys>"]
do.command = "modalkeys.ignore"
allowed_prefixes = "<all-prefixes>"
mode = ["!insert", "!search"]
when = "editorTextFocus"

[[bind.modes.items]]
key = "i"
mode = "normal"
do = ["modalkeys.enterInsert", "modalkeys.reset"]

[bind.edit]
name = "Editor Commands"
description = """
Most commands are editing commands, they interact with the text editor, either by
selecting text in the editor, moving around it, manipulating text in the editor, and
so forth.
"""
default.when = "editorTextFocus && !findWidgetVisible"

[bind.edit.count]
name = "count"
description = """
The number keys are used to update the count, which affects how many times the next 
command is repeated, when relevant.
"""

[[bind.edit.count.items]]
name = "Update number with {key}"
key = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
do.command = "modalkeys.updateCount"
do.args.value = "{key}"
resetTransient = false
mode = "!insert" # number keys apply in all modes but insert

[bind.edit.motion]
name = "Motions"
description = "Commands that move the cursors and/or selections"
kind = "select"
default.mode = "normal"

[bind.edit.motion.prim]
name = "Primitive Motions"
description = "Motions fundamental to moving around in the editor."
default.do.command = "cursorMove"
default.do.computedArgs.value = "count"
default.do.computedArgs.around = "around_on"
default.do.computedArgs.select = "select_on"

[[bind.edit.motion.prim.items]]
key = "h"
name = "←"
description = "move left"
do.args.to = "left"

[[bind.edit.motion.prim.items]]
key = "j"
name = "↓"
description = "move down"
do.args.to = "down"

[[bind.edit.motion.prim.items]]
key = "k"
name = "↑"
description = "move up"
do.args.to = "up"

[[bind.edit.motion.prim.items]]
key = "l"
name = "→"
description = "move right"
do.args.to = "right"

[bind.edit.motion.obj]
name = "Motions around various regex-like objects"
description = """
selection commands that move by a predefined syntactic object (e.g. word, paragraph, etc...)
"""
default.do.command = "selection-utilities.moveBy"
default.do.args.boundary = "start"
default.allowed_prefixes = ["", "u"]
default.do.computedArgs.select = "(select_on || editorHasSelection) && !around_on"
default.do.computedArgs.selectWhole = "around_on"

[[bind.edit.motion.obj.items]]
key = "w"
name = "subwrd →"
description = "next subword (camel/snake case)"
do.args.unit = "subword"
do.computedArgs.value = "count"

[[bind.edit.motion.obj.items]]
key = "e"
name = "subwrd end"
description = "next subword (camel/snake case) end"
do.args.unit = "subword"
do.computedArgs.boundary = "around_on ? 'both' : 'end'"
do.computedArgs.value = "count"